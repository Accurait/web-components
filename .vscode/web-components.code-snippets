{
  // Place your web-components workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "create a story for storybook": {
    "prefix": "story",
    "body": [
      "import type { Meta, StoryObj } from '@storybook/vue3'",
      "",
      "import ${1:component} from './${1:component}.vue'",
      "",
      "const meta: Meta<typeof ${1:component}> = {",
      "  title: '${1:component}',",
      "  component: ${1:component},",
      "  render: (args) => ({",
      "    components: { ${1:component} },",
      "    setup() {",
      "      return { args }",
      "    },",
      "    template: '<${1:component} v-bind=\"args\">{{args.content}}</${1:component}>',",
      "  }),",
      "  argTypes: {},",
      "  args: {",
      "    content: '',",
      "  },",
      "}",
      "",
      "//ðŸ‘‡ This default export determines where your story goes in the story list",
      "export default meta",
      "type Story = StoryObj<typeof ${1:component}>",
      "",
      "export const Primary: Story = {",
      "  args: {",
      "    //ðŸ‘‡ The args you need here will depend on your component",
      "  },",
      "}"
    ],
    "description": "create a story for storybook"
  },
  "component class composable": {
    "prefix": "classes",
    "body": [
      "import { cva, type VariantProps } from 'class-variance-authority'",
      "",
      "// define the props",
      "export type ${1:component}VariantProps = VariantProps<typeof use${1:component}Classes>",
      "",
      "export const use${1:component}Classes = cva(",
      "  [",
      "    ${2:'default tailwind classes'}",
      "  ],",
      "  {",
      "    variants: {",
      "    ",
      "    },",
      "    defaultVariants: {",
      "    ",
      "    },",
      "  }",
      ")"
    ],
    "description": "component class composable"
  },
  "basic web-component": {
    "prefix": "comp",
    "body": [
      "<script setup lang=\"ts\">",
      "import { use${1:component}Classes, ${1:component}VariantProps } from './composables/use${1:component}Classes'",
      "import { twMerge } from 'tailwind-merge'",
      "",
      "const props = defineProps({",
      "  ${2:style}: {",
      "    type: String as PropType<${1:component}VariantProps['${2:style}']>,",
      "  },",
      "  class: {",
      "    type: String,",
      "  },",
      "})",
      "",
      "const classes = computed(() =>",
      "  twMerge(",
      "    use${1:component}Classes({",
      "      size: props.size,",
      "    }),",
      "    props.class",
      "  )",
      ")",
      "</script>",
      "",
      "<template>",
      "  <div :class=\"[...classes.split(' ')]\">",
      "",
      "  </div>",
      "</template>"
    ],
    "description": "basic web-component"
  }
}
